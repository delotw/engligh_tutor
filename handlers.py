from aiogram import F, Router, types
from aiogram.enums import ParseMode
from aiogram.types import InlineKeyboardButton, InlineKeyboardMarkup, KeyboardButton, ReplyKeyboardMarkup
from db.db_functions import get_random_task, create_paste_user_id

# –ó–∞–≥–æ—Ç–æ–≤–∫–∞ –∫–æ–¥–∞, –Ω–µ –±–æ–ª–µ–µ
# user_id = message.from_user.id
# username = message.from_user.username
# first_name = message.from_user.first_name
# last_name = message.from_user.last_name


# –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
# ------------------------------------
p_html = ParseMode.HTML
router = Router()


# –ü—Ä–∏–≤–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ
# ------------------------------------
@router.message(F.text == '/start')
async def send_welcome(message: types.Message) -> None:
    first_name = message.from_user.first_name
    tg_id = message.from_user.id
    text = (f'<b>–ü—Ä–∏–≤–µ—Ç, {first_name} </b>üëã\n'
            f'–ú–µ–Ω—è –∑–æ–≤—É—Ç <b>–¢—å—é—Ç–æ—Ä</b> –∏ —è –ø–æ–º–æ–≥—É —Ç–µ–±–µ –ø–æ–¥–≥–æ—Ç–æ–≤–∏—Ç—å—Å—è –∫ –ï–ì–≠ –ø–æ –∞–Ω–≥–ª–∏–π—Å–∫–æ–º—É!\n'
            f'–ù–æ —Å–Ω–∞—á–∞–ª–∞ –≤—ã–±–µ—Ä–∏, –≤ –∫–∞–∫–æ–º –∫–ª–∞—Å—Å–µ —Ç—ã —É—á–∏—à—å—Å—è:')
    kb = ReplyKeyboardMarkup(
        keyboard=[[KeyboardButton(text='–ü—Ä–æ–≥—É–ª–∏–≤–∞—é—Å—å –º–∏–º–æ'), KeyboardButton(text='10'), KeyboardButton(text='11')]]
    )
    create_paste_user_id(tg_id, first_name)

    await message.answer(text=text, reply_markup=kb, parse_mode=p_html)


@router.message(F.text in ['10', '11', '–ü—Ä–æ–≥—É–ª–∏–≤–∞—é—Å—å –º–∏–º–æ'])
async def paste_class(message: types.Message):
    grade = message.text
    

# –°—Ç–∞—Ä—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ—è–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è –±–æ—Ç–∞
# ------------------------------------
# @router.message(F.text == "/start")
# async def send_welcome(message: types.Message) -> None:
#     first_name = message.from_user.first_name
#
#     kb = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", callback_data="preparation")],
#             [InlineKeyboardButton(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_cabinet")],
#             [InlineKeyboardButton(text="–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")],
#         ]
#     )
#     text = f"<b>–ü—Ä–∏–≤–µ—Ç, {first_name} </b>üëã\n–í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª:"
#
#     await message.answer(text=text, reply_markup=kb, parse_mode=p_html)
#

# –í–æ–∑–≤—Ä–∞—â–µ–Ω–∏–µ –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
# ------------------------------------
@router.callback_query(F.data == "main_menu")
async def back_to_main_menu(callback: types.CallbackQuery) -> None:
    first_name = callback.from_user.first_name
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞", callback_data="preparation")],
            [InlineKeyboardButton(text="–õ–∏—á–Ω—ã–π –∫–∞–±–∏–Ω–µ—Ç", callback_data="user_cabinet")],
            [
                InlineKeyboardButton(
                    text="–¢–µ—Ö–Ω–∏—á–µ—Å–∫–∞—è –ø–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support"
                )
            ],
        ]
    )
    text = f"<b>–ü—Ä–∏–≤–µ—Ç, {first_name} üëã</b>\n –í—ã–±–µ—Ä–∏ –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–π —Ç–µ–±—è —Ä–∞–∑–¥–µ–ª –Ω–∏–∂–µ:"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()


# –ú–µ–Ω—é "–ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞"
# ------------------------------------
@router.callback_query(F.data == "preparation")
async def menu_preparation(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ì–æ—Ç–æ–≤—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã üìö", callback_data="choose_exam_variants"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–¢–∏–ø–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è üìã", callback_data="choose_tamplate_tasks"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∏—Å—å–º–æ üìù", callback_data="choose_essay"
                )
            ],
            [InlineKeyboardButton(text="–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", callback_data="main_menu")],
        ]
    )
    text = "–û—Ç–ª–∏—á–Ω–æ, —á—Ç–æ –∂–µ —Ç–µ–±—è –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()


# –ú–µ–Ω—é –ª–∏—á–Ω–æ–≥–æ –∫–∞–±–∏–Ω–µ—Ç–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
# ------------------------------------
@router.callback_query(F.data == "user_cabinet")
async def menu_user_profile(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")],
        ]
    )
    text = "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()


# –ú–µ–Ω—é —Å —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–æ–π –ø–æ–¥–¥–µ—Ä–∂–∫–æ–π
# ------------------------------------
@router.callback_query(F.data == "support")
async def menu_support(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="main_menu")],
        ]
    )
    text = "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è: @delotbtw"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    # await callback.message.answer()


# –í—ã–±–æ—Ä –≥–æ—Ç–æ–≤–æ–≥–æ –≤–∞—Ä–∏–∞–Ω—Ç–∞
# ------------------------------------
@router.callback_query(F.data == "choose_exam_variants")
async def menu_exam_variants(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(text="–í–∞—Ä–∏–∞–Ω—Ç 1", callback_data="variant"),
                InlineKeyboardButton(text="–í–∞—Ä–∏–∞–Ω—Ç 2", callback_data="variant"),
            ],
            [
                InlineKeyboardButton(text="–í–∞—Ä–∏–∞–Ω—Ç 3", callback_data="variant"),
                InlineKeyboardButton(text="–í–∞—Ä–∏–∞–Ω—Ç 4", callback_data="variant"),
            ],
            [
                InlineKeyboardButton(
                    text="–†–∞–Ω–¥–æ–º–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç", callback_data="variant_random"
                )
            ],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="preparation")],
        ]
    )
    text = "–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º –æ–±—Ä–∞—â–∞—Ç—å—Å—è: @delobtw"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()


# –í—ã–±–æ—Ä —Ç–∏–ø–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
# ------------------------------------
@router.callback_query(F.data == "choose_tamplate_tasks")
async def menu_template_tasks(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ê—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ üéß", callback_data="part_audirovanie"
                ),
                InlineKeyboardButton(text="–ß—Ç–µ–Ω–∏–µ üìñ", callback_data="part_reading"),
            ],
            [
                InlineKeyboardButton(
                    text="–õ–µ–∫—Å–∏–∫–∞ –∏ –≥—Ä–∞–º–º–∞—Ç–∏–∫–∞ üìö", callback_data="part_grammar"
                ),
                InlineKeyboardButton(text="–ü–∏—Å—å–º–æ ‚úçÔ∏è", callback_data="part_mail"),
            ],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="preparation")],
        ]
    )
    text = "–ß–∞—Å—Ç—å —ç–∫–∑–∞–º–µ–Ω–∞:"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()


# –†–∞–∑–¥–µ–ª —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –ø–∏—Å—å–º–∞
# ------------------------------------
@router.callback_query(F.data == "choose_essay")
async def menu_check_mail(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [
                InlineKeyboardButton(
                    text="–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–π—Ä–æ—Å–µ—Ç—å—é ü§ñ", callback_data="check_by_ai"
                )
            ],
            [
                InlineKeyboardButton(
                    text="–ü—Ä–æ–≤–µ—Ä–∫–∞ —ç–∫—Å–ø–µ—Ä—Ç–æ–º üë®‚Äçüè´", callback_data="check_by_expert"
                )
            ],
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="preparation")],
        ]
    )
    text = "–£—Ö —Ç—ã, —É–∂–µ –µ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–Ω–æ–µ –ø–∏—Å—å–º–æ? –ö—Ä—É—Ç–æ! \n–ö–∞–∫–æ–π —Ç–∏–ø –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—ã–±–µ—Ä–µ—à—å?"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()


# !!!!!!!!!!! !!–¢–£–ü–û –ó–ê–ì–õ–£–®–ö–ò –î–õ–Ø –ö–ù–û–ü–û–ö, –ü–û–ö–ê –ù–ï –ù–ê–ü–ò–®–£ –ü–û–î –ù–ò–• –ö–û–î !!!!!!!!!!!
# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É —ç–∫—Å–ø–µ—Ä—Ç–æ–º
# ------------------------------------
@router.callback_query(F.data == "check_by_expert")
async def check_by_expert(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="choose_essay")]
        ]
    )
    text = "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É –Ω–µ–π—Ä–æ–Ω–∫–æ–π
# ------------------------------------
@router.callback_query(F.data == "check_by_ai")
async def check_by_ai(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="choose_essay")]
        ]
    )
    text = "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –≥–æ—Ç–æ–≤—ã–µ –Ω—É–º–µ—Ä–æ–≤–∞–Ω–Ω—ã–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã
# ------------------------------------
@router.callback_query(F.data == "variant")
async def done_variants(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="choose_exam_variants")]
        ]
    )
    text = "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —Ä–∞–Ω–¥–æ–º–Ω—ã–π –≤–∞—Ä–∏–Ω–∞—Ç
# ------------------------------------
@router.callback_query(F.data == "variant_random")
async def random_variant(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="choose_exam_variants")]
        ]
    )
    text = "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()


# ! –í–∞—Ä–∏–∞–Ω—Ç —Ç–æ–≥–æ, –∫–∞–∫ –º–æ–∂–Ω–æ –≤—ã—Ç–∞—Å–∫–∏–≤–∞—Ç—å –∑–∞–¥–∞–Ω–∏—è –∏–∑ –±–¥ –∏ –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å –∏—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
# @router.callback_query(F.data == "variant_random")
# async def random_variant(callback: types.CallbackQuery) -> None:
#     kb = InlineKeyboardMarkup(
#         inline_keyboard=[
#             [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="choose_exam_variants")]
#         ]
#     )
#     task = get_random_task(10)
#     id, desc, ans = task[1], task[2], task[3]
#     text = (f'–¢–∞–∫, –Ω—É –≤–æ—Ç —Ç–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ {id}:\n'
#             f'{desc}\n'
#             f'<span class="tg-spoiler">{ans}</span>')
#
#     await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
#     await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ –∞—É–¥–∏—Ä–æ–≤–∞–Ω–∏–µ
# ------------------------------------
@router.callback_query(F.data == "part_audirovanie")
async def part_audio(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="choose_tamplate_tasks")]
        ]
    )
    text = "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ
# ------------------------------------
@router.callback_query(F.data == "part_reading")
async def part_reading(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="choose_tamplate_tasks")]
        ]
    )
    text = "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ
# ------------------------------------
@router.callback_query(F.data == "part_grammar")
async def part_grammar(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="choose_tamplate_tasks")]
        ]
    )
    text = "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()


# ? –ó–∞–≥–ª—É—à–∫–∞ –Ω–∞ —á—Ç–µ–Ω–∏–µ
# ------------------------------------
@router.callback_query(F.data == "part_mail")
async def part_mail(callback: types.CallbackQuery) -> None:
    kb = InlineKeyboardMarkup(
        inline_keyboard=[
            [InlineKeyboardButton(text="–ù–∞–∑–∞–¥", callback_data="choose_tamplate_tasks")]
        ]
    )
    text = "–ü–æ–∫–∞ –≤ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–µ, —Å–∫–æ—Ä–æ –∏—Å–ø—Ä–∞–≤–∏–º üòÜ"

    await callback.message.edit_text(text=text, reply_markup=kb, parse_mode=p_html)
    await callback.answer()
